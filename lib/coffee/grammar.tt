grammar Coffee

  rule code
    space* statement space* more_statements:((';'/newline) space* statement space*)* newline* <Code> {
      def value
        [statement] + more_statements.elements.map {|s| s.statement }
      end
    }
  end

  rule statement
    'if' space+ cond:condition space+ 'then' space+ trueBody:statement space+ 'end' <IfElse> /
    'if' space+ cond:condition space+ 'then' space+ trueBody:statement space+ 'else' space+ falseBody:statement space+ 'end' <IfElse> /
    builtins /
    assign /
    expression
  end

  rule expression
    fname:identifier space* '(' args:(expression)* ')' <Call> {
      def arguments
        if args.elements.nil?
          []
        else
          args.elements
        end
      end
    } /
    fname:identifier space+ args:(expression)+ <Call> {
      def arguments
        args.elements
      end
    } /
    fun_keyword args:(space+ arg:identifier)* space+ '->' space+ body:expression <Function> {
      def arguments
        args.elements.map {|a| a.arg.text_value }
      end
    } /
    space* addition space* <Expression> {
      def value
        addition
      end
    }
  end

  rule condition
    left:primary space* '==' space* right:primary <Comparison>
  end

  rule assign
    id:identifier space* '=' space* expression <Assign>
  end

  rule builtins
    'print' space expression <Print> /
    'print' '(' expression ')' <Print>
  end

  rule addition
    left:addition space* op:('+' / '-') space* right:multiplication <BinOp> /
    multiplication
  end

  rule multiplication
    left:multiplication space* op:('*' / '/' / '%') space* right:primary <BinOp> /
    primary
  end

  rule primary
    '(' space* expression space* ')' <Expression> {
      def value
        expression
      end
    } /
    number /
    !fun_keyword [a-zA-Z] [\w]* <Load>
  end

  rule number
    [0-9]+ <Number> /
    '-' [0-9]+ <Number>
  end

  rule identifier
    !fun_keyword !('if'/'then'/'else'/'end') [a-zA-Z] [\w]*
  end

  rule fun_keyword
    ('Î»' / '\\' / 'fun')
  end

  rule space
    [ \t]
  end

  rule newline
    ("\r\n"+ / [\r\n]+)
  end

end

grammar Coffee

  rule code
    space* statement space* more_statements:(';' space* statement space*)* newline* <Code> {
      def value
        [statement] + more_statements.elements.map {|s| s.statement }
      end
    }
  end

  rule statement
    builtins /
    id:identifier space* '=' space* expression <Assign> /
    expression
  end

  rule expression
    space* addition space* <Expression> {
      def value
        addition
      end
    } /
    ('Î»' / '\\' / 'fun') space+ identifier space+ '->' space+ expression
  end

  rule builtins
    'print' space expression <Print> /
    'print' '(' expression ')' <Print>
  end

  rule addition
    left:multiplication space* op:('+' / '-') space* right:addition <BinOp> /
    multiplication
  end

  rule multiplication
    left:primary space* op:('*' / '/' / '%') space* right:multiplication <BinOp> /
    primary
  end

  rule primary
    '(' space* expression space* ')' <Expression> {
      def value
        expression
      end
    } /
    number
  end

  rule number
    [0-9]+ <Number> /
    '-' [0-9]+ <Number>
  end

  rule identifier
    [a-zA-Z]+
  end

  rule space
    [ \t]
  end

  rule newline
    space* ("\r\n"+ / [\r\n]+ / ";") space*
  end

end
